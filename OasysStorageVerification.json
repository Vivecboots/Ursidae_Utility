{
    "language": "Solidity",
    "sources": {
      "./contracts/OasysStorage.sol": {
        "content": "// Sources flattened with hardhat v2.17.2 https://hardhat.org\n\n// SPDX-License-Identifier: MIT\n\n// File contracts/osis2.sol\n\n// Original license: SPDX_License_Identifier: MIT\npragma solidity ^0.8.18;\n\ncontract OasysStorage {\n    mapping(address => string[]) private userCIDs;\n    mapping(string => string) private decryptionKeys;\n    mapping(address => mapping(string => bool)) private hasStoredCID;\n\nevent CIDStored(address indexed user, string cid);\n\nfunction storeCID(string memory cid, string memory key) external {\n    require(!hasStoredCID[msg.sender][cid], \"CID already stored for this address\");\n\n    userCIDs[msg.sender].push(cid);\n    decryptionKeys[cid] = key;\n    hasStoredCID[msg.sender][cid] = true;\n\n    emit CIDStored(msg.sender, cid);\n}\n\nfunction getCIDs(address user) external view returns (string[] memory) {\n    return userCIDs[user];\n}\n\nfunction getDecryptionKey(string memory cid) external view returns (string memory) {\n    require(hasStoredCID[msg.sender][cid], \"Not authorized or CID not found\");\n    return decryptionKeys[cid];\n}\n}"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "evmVersion": "istanbul",
      "libraries": {}
    },
    "compiler": {
      "version": "0.8.18"
    }
  }
  